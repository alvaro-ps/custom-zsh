if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
endif

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive' "git integration
Plug 'scrooloose/syntastic' "code syntaxis
Plug 'Raimondi/delimitMate' "automatic closing of quotes, parenthesis...
Plug 'yggdroot/indentline' "Show indent lines (useful for loops)
Plug 'easymotion/vim-easymotion' "simpler way to use some motions in vim
Plug 'tmhedberg/matchit' "extension of % for HTM, latex, ...
Plug 'idbrii/vim-notgrep'   "ack in vim
Plug 'sheerun/vim-polyglot'  "highlighting for some files (Jenkinsfiles)
Plug 'psf/black', { 'branch': 'stable' }  "python black
Plug 'godlygeek/tabular'


call plug#end()

let mapleader=" "
inoremap jj <esc>
vnoremap jj <esc>
nnoremap z :bnext<return>
nnoremap Z :bprevious<return>
nnoremap <C-z> :bdelete<return>
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
set nu
set colorcolumn=90
set backupcopy=yes
set nowrap

""For copying to the clipboard
"noremap <C-c> "+y
"noremap <C-v> "+p
if system('uname -s') == "Darwin\n"
  set clipboard=unnamed
else 
  set clipboard=unnamedplus
endif

"""For incremental searching and highlighting
set incsearch
set hlsearch
"""For switching to another buffer without saving
set hidden

"""Do not expandtab for makefiles!
autocmd FileType make setlocal noexpandtab
"""Handle tab spacing in python
augroup python_files
    autocmd!
    autocmd FileType python set tabstop=4
    autocmd FileType python set shiftwidth=4
augroup END

""""PLUGINS""""

""For syntastic (syntactic checker)
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_auto_loc_list = 1
let g:syntastic_python_checkers = ['pylint', 'pep8']
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
nnoremap <silent> <Leader>s :SyntasticToggleMode<return> 
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [],
                           \ 'passive_filetypes': []}
let g:syntastic_python_pep8_args = '--ignore="E111,E114"'
let g:syntastic_python_pylint_args = '--disable="C0103,W0311"'
"""Folding
nnoremap , za
nnoremap < zA

"""For JSON files (apparently it is already installed)
let g:vim_json_syntax_conceal = 0
"""notgrep
""" grep the contents of the clipboard
nnoremap <silent> <Leader>f :NotGrep <C-R>"<return>
nnoremap <Leader>fi :NotGrep -i
""" For black
"autocmd BufWritePre *.py execute ':Black'
"let g:black_linelength = 100
""" For cucumber
inoremap <leader>b   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

""" Tabularize
nnoremap <Leader>t :Tabularize /\|<CR><return>
